// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Spending {
  id           Int       @id @default(autoincrement())
  datetime     DateTime  @default(now())
  amount       Float // usd
  comment      String?
  exchangeRate Int // usd-rub
  category     Category  @relation(fields: [categoryId], references: [id])
  categoryId   Int
  // currency     Currency @relation(fields: [currencyId], references: [id])
  // currencyId   Int
  Currency     Currency? @relation(fields: [currencyId], references: [id])
  currencyId   Int?
}

model Income {
  id           Int       @id @default(autoincrement())
  datetime     DateTime  @default(now())
  amount       Int // usd
  exchangeRate Int // usd-rub
  source       Source    @relation(fields: [sourceId], references: [id])
  // currency     Currency @relation(fields: [currencyId], references: [id])
  // currencyId   Int
  comment      String?
  sourceId     Int
  Currency     Currency? @relation(fields: [currencyId], references: [id])
  currencyId   Int?
}

model Source {
  id     Int      @id @default(autoincrement())
  name   String
  Income Income[]
}

model Category {
  id           Int            @id @default(autoincrement())
  name         String
  color        String         @default("red")
  hide         Boolean        @default(false) // Не показывать нигде; Можно изменить в настройках
  Spending     Spending[]
  CategoryPlan CategoryPlan[]
}

model Plan {
  id            Int            @id @default(autoincrement())
  monthDateTime DateTime       @default(now())
  name          String
  CategoryPlan  CategoryPlan[]
}

model CategoryPlan {
  id         Int       @id @default(autoincrement())
  amount     Int
  // currency   Currency @relation(fields: [currencyId], references: [id])
  // currencyId Int
  plan       Plan      @relation(fields: [planId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])
  planId     Int
  categoryId Int
  Currency   Currency? @relation(fields: [currencyId], references: [id])
  currencyId Int?
}

model Currency {
  id           Int            @id @default(autoincrement())
  name         String
  CategoryPlan CategoryPlan[]
  Spending     Spending[]
  Income       Income[]
}

enum Type {
  spending
  income
}
